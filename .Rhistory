reticulate::py_discover_config(use_environment = "C:/prova/Rconda/python.exe")
reticulate::use_python(python = "C:/prova/Rconda/python.exe")
reticulate::py_config()
usethis::edit_r_environ(scope = "project")
?predict
?paste0
?substring
?basename
?row_number
??row_number
?length
?any
?list
?gdalwarp
??gdalwapr
output_path
in_file <- "//10.0.1.243/nr_data/3_rs_data/PRISMA/JDS/2023/L2C/prove_per_pacchetto/PRS_L2C_STD_20230304102047_20230304102051_0001.he5"
out_folder  <-  "//10.0.1.243/nr_data/3_rs_data/PRISMA/JDS/2023/L2C/prove_per_pacchetto/"
s2_file <- "//10.0.1.243/nr_data/3_rs_data/PRISMA/JDS/2023/L2C/prove_per_pacchetto/S2_20230309_B08_T32TQQ_ritagliato_QGIS.tif"
######################################################################
#deduce folders ----
######################################################################
product_type <- base::substring(base::basename(in_file),5,6)
coreg_out_folder <- base::paste0(out_folder,"coreg/")
smoothing_out_folder <- base::paste0(out_folder,"smoothing/")
regrid_out_folder <- base::paste0(out_folder,"regrid/")
base::dir.create(regrid_out_folder, recursive = T, showWarnings = F)
regrid_out_folder
master_image_path <- "//10.0.1.243/projects/2022_ASI-PRIS4VEG/3-DATA/images/PRISMA_img_master/PRS_L2D_STD_20200407_HCO_JDS_EXT_FULL_30m_smooth_v1_170b"
sen2r::gdalwarp_grid(srcfiles = c(smoothing_out),
dstfiles = c(paste0(regrid_out_folder,"PRISMA_regrid.tif")),
ref = master_image_path,
of = "TIFF",
r = "cubicspline")
library(sen2r)
gdalwarp_grid(srcfiles = c(smoothing_out),
dstfiles = c(paste0(regrid_out_folder,"PRISMA_regrid.tif")),
ref = master_image_path,
of = "TIFF",
r = "cubicspline")
??gdalwarp_grid
?gdalwarp_grid
?gdal_warp
gdal_warp()
gdal_warp
gdalwarp_grid
gdalwarp_grid(srcfiles = c(smoothing_out),
dstfiles = c(paste0(regrid_out_folder,"PRISMA_regrid.tif")),
ref = master_image_path,
of = "TIFF",
r = "cubicspline")
gdalwarp_grid(
)
gdal_warp(
)
gdal_warp(srcfiles = c(smoothing_out),
dstfiles = c(paste0(regrid_out_folder,"PRISMA_regrid.tif")),
ref = master_image_path,
of = "TIFF",
r = "cubicspline")
smoothing_out <-  paste0(smoothing_out_folder, "PRISMA_smoothed.tif")
gdal_warp(srcfiles = c(smoothing_out),
dstfiles = c(paste0(regrid_out_folder,"PRISMA_regrid.tif")),
ref = master_image_path,
of = "TIFF",
r = "cubicspline")
gdal_warp(srcfiles = c(smoothing_out),
dstfiles = c(paste0(regrid_out_folder,"PRISMA_regrid.tif")),
ref = master_image_path,
of = "GeoTIFF",
r = "cubicspline")
gdal_warp(srcfiles = c(smoothing_out),
dstfiles = c(paste0(regrid_out_folder,"PRISMA_regrid.tif")),
ref = master_image_path,
r = "cubicspline")
??grid
??regrid
??gdalwarp_grid
gdalwarp_grid <- function(
srcfiles,
dstfiles,
ref,
of = NULL,
r = NULL,
dstnodata = NA,
tmpdir = tempdir()
) {
# read ref parameters
ref_metadata <- raster_metadata(ref, c("res", "bbox", "proj"), format = "list")[[1]]
ref_res <- ref_metadata$res
ref_min <- ref_metadata$bbox[c("xmin","ymin")]
ref_proj <- ref_metadata$proj
# check tmpdir
dir.create(tmpdir, showWarnings = FALSE, recursive = FALSE)
# check consistency between inputs and outputs
if (length(srcfiles) != length(dstfiles)) {
print_message(
type="error",
"\"srcfiles\" (\"",
paste(srcfiles, collapse="\", \""),
"\") and \"dstfiles\" (\"",
paste(dstfiles, collapse="\", \""),
"\") must be of the same length."
)
}
# check output format
if (!is.null(of)) {
local_ofs <- as.character(st_drivers("raster")$name)
if (!of %in% local_ofs) {
print_message(
type="error",
"Format \"",of,"\" is not recognised; ",
"please use one of the formats supported by package \"sf\".\n\n",
"To list them, use the following command:\n",
"\u00A0\u00A0sf::st_drivers(\"raster\")")
}
}
# cycle on each infiles
for (i in seq_along(srcfiles)) {
srcfile <- srcfiles[i]
dstfile <- dstfiles[i]
# read infile parameters
sel_metadata <- raster_metadata(srcfile, c("proj", "bbox", "outformat"), format = "list")[[1]]
sel_proj <- sel_metadata$proj
sel_bbox <- sel_metadata$bbox
of <- ifelse (is.null(of), sel_metadata$outformat, of)
# get reprojected extent
out_bbox <- matrix(
st_bbox(st_transform(st_as_sfc(sel_bbox), st_crs2(ref_proj))),
nrow=2, ncol=2,
dimnames=list(c("x","y"),c("min","max"))
)
# allineate out_extent to ref grid
out_bbox_mod <- ceiling((out_bbox - ref_min) / ref_res) * ref_res + ref_min
# extract out CRS string
sel_proj_string <- if (!is.na(sel_proj$epsg)) {
paste0("EPSG:",sel_proj$epsg)
} else {
writeLines(
st_as_text_2(sel_proj),
sel_proj_path <- tempfile(pattern = "sel_proj_", tmpdir = tmpdir, fileext = ".prj")
)
sel_proj_path
}
ref_proj_string <- if (!is.na(ref_proj$epsg)) {
paste0("EPSG:",ref_proj$epsg)
} else {
writeLines(
st_as_text_2(ref_proj),
ref_proj_path <- tempfile(pattern = "ref_proj_", tmpdir = tmpdir, fileext = ".prj")
)
ref_proj_path
}
# warp
gdalUtil(
"warp",
source = srcfile,
destination = dstfile,
options = c(
"-s_srs", sel_proj_string,
"-t_srs", ref_proj_string,
"-te", c(out_bbox_mod),
"-tr", as.vector(ref_res),
if (!missing(dstnodata)) {c("-dstnodata", dstnodata)},
if (!is.null(r)) {c("-r", r)},
if (!is.null(of)) {c("-of", of)}
),
quiet = TRUE
)
}
}
gdalwarp_grid(srcfiles = c(smoothing_out),
dstfiles = c(paste0(regrid_out_folder,"PRISMA_regrid.tif")),
ref = master_image_path,
r = "cubicspline")
??st_bbox
??st_transform
gdalwarp_grid <- function(
srcfiles,
dstfiles,
ref,
of = NULL,
r = NULL,
dstnodata = NA,
tmpdir = tempdir()
) {
# read ref parameters
ref_metadata <- raster_metadata(ref, c("res", "bbox", "proj"), format = "list")[[1]]
ref_res <- ref_metadata$res
ref_min <- ref_metadata$bbox[c("xmin","ymin")]
ref_proj <- ref_metadata$proj
# check tmpdir
dir.create(tmpdir, showWarnings = FALSE, recursive = FALSE)
# check consistency between inputs and outputs
if (length(srcfiles) != length(dstfiles)) {
print_message(
type="error",
"\"srcfiles\" (\"",
paste(srcfiles, collapse="\", \""),
"\") and \"dstfiles\" (\"",
paste(dstfiles, collapse="\", \""),
"\") must be of the same length."
)
}
# check output format
if (!is.null(of)) {
local_ofs <- as.character(st_drivers("raster")$name)
if (!of %in% local_ofs) {
print_message(
type="error",
"Format \"",of,"\" is not recognised; ",
"please use one of the formats supported by package \"sf\".\n\n",
"To list them, use the following command:\n",
"\u00A0\u00A0sf::st_drivers(\"raster\")")
}
}
# cycle on each infiles
for (i in seq_along(srcfiles)) {
srcfile <- srcfiles[i]
dstfile <- dstfiles[i]
# read infile parameters
sel_metadata <- raster_metadata(srcfile, c("proj", "bbox", "outformat"), format = "list")[[1]]
sel_proj <- sel_metadata$proj
sel_bbox <- sel_metadata$bbox
of <- ifelse (is.null(of), sel_metadata$outformat, of)
# get reprojected extent
out_bbox <- matrix(
sf::st_bbox(sf::st_transform(sf::st_as_sfc(sel_bbox), sf::st_crs2(ref_proj))),
nrow=2, ncol=2,
dimnames=list(c("x","y"),c("min","max"))
)
# allineate out_extent to ref grid
out_bbox_mod <- ceiling((out_bbox - ref_min) / ref_res) * ref_res + ref_min
# extract out CRS string
sel_proj_string <- if (!is.na(sel_proj$epsg)) {
paste0("EPSG:",sel_proj$epsg)
} else {
writeLines(
st_as_text_2(sel_proj),
sel_proj_path <- tempfile(pattern = "sel_proj_", tmpdir = tmpdir, fileext = ".prj")
)
sel_proj_path
}
ref_proj_string <- if (!is.na(ref_proj$epsg)) {
paste0("EPSG:",ref_proj$epsg)
} else {
writeLines(
st_as_text_2(ref_proj),
ref_proj_path <- tempfile(pattern = "ref_proj_", tmpdir = tmpdir, fileext = ".prj")
)
ref_proj_path
}
# warp
gdalUtil(
"warp",
source = srcfile,
destination = dstfile,
options = c(
"-s_srs", sel_proj_string,
"-t_srs", ref_proj_string,
"-te", c(out_bbox_mod),
"-tr", as.vector(ref_res),
if (!missing(dstnodata)) {c("-dstnodata", dstnodata)},
if (!is.null(r)) {c("-r", r)},
if (!is.null(of)) {c("-of", of)}
),
quiet = TRUE
)
}
}
gdalwarp_grid(srcfiles = c(smoothing_out),
dstfiles = c(paste0(regrid_out_folder,"PRISMA_regrid.tif")),
ref = master_image_path,
r = "cubicspline")
??st_crs2
gdalwarp_grid <- function(
srcfiles,
dstfiles,
ref,
of = NULL,
r = NULL,
dstnodata = NA,
tmpdir = tempdir()
) {
# read ref parameters
ref_metadata <- raster_metadata(ref, c("res", "bbox", "proj"), format = "list")[[1]]
ref_res <- ref_metadata$res
ref_min <- ref_metadata$bbox[c("xmin","ymin")]
ref_proj <- ref_metadata$proj
# check tmpdir
dir.create(tmpdir, showWarnings = FALSE, recursive = FALSE)
# check consistency between inputs and outputs
if (length(srcfiles) != length(dstfiles)) {
print_message(
type="error",
"\"srcfiles\" (\"",
paste(srcfiles, collapse="\", \""),
"\") and \"dstfiles\" (\"",
paste(dstfiles, collapse="\", \""),
"\") must be of the same length."
)
}
# check output format
if (!is.null(of)) {
local_ofs <- as.character(st_drivers("raster")$name)
if (!of %in% local_ofs) {
print_message(
type="error",
"Format \"",of,"\" is not recognised; ",
"please use one of the formats supported by package \"sf\".\n\n",
"To list them, use the following command:\n",
"\u00A0\u00A0sf::st_drivers(\"raster\")")
}
}
# cycle on each infiles
for (i in seq_along(srcfiles)) {
srcfile <- srcfiles[i]
dstfile <- dstfiles[i]
# read infile parameters
sel_metadata <- raster_metadata(srcfile, c("proj", "bbox", "outformat"), format = "list")[[1]]
sel_proj <- sel_metadata$proj
sel_bbox <- sel_metadata$bbox
of <- ifelse (is.null(of), sel_metadata$outformat, of)
# get reprojected extent
out_bbox <- matrix(
sf::st_bbox(sf::st_transform(sf::st_as_sfc(sel_bbox), sen2r::st_crs2(ref_proj))),
nrow=2, ncol=2,
dimnames=list(c("x","y"),c("min","max"))
)
# allineate out_extent to ref grid
out_bbox_mod <- ceiling((out_bbox - ref_min) / ref_res) * ref_res + ref_min
# extract out CRS string
sel_proj_string <- if (!is.na(sel_proj$epsg)) {
paste0("EPSG:",sel_proj$epsg)
} else {
writeLines(
st_as_text_2(sel_proj),
sel_proj_path <- tempfile(pattern = "sel_proj_", tmpdir = tmpdir, fileext = ".prj")
)
sel_proj_path
}
ref_proj_string <- if (!is.na(ref_proj$epsg)) {
paste0("EPSG:",ref_proj$epsg)
} else {
writeLines(
st_as_text_2(ref_proj),
ref_proj_path <- tempfile(pattern = "ref_proj_", tmpdir = tmpdir, fileext = ".prj")
)
ref_proj_path
}
# warp
gdalUtil(
"warp",
source = srcfile,
destination = dstfile,
options = c(
"-s_srs", sel_proj_string,
"-t_srs", ref_proj_string,
"-te", c(out_bbox_mod),
"-tr", as.vector(ref_res),
if (!missing(dstnodata)) {c("-dstnodata", dstnodata)},
if (!is.null(r)) {c("-r", r)},
if (!is.null(of)) {c("-of", of)}
),
quiet = TRUE
)
}
}
gdalwarp_grid(srcfiles = c(smoothing_out),
dstfiles = c(paste0(regrid_out_folder,"PRISMA_regrid.tif")),
ref = master_image_path,
r = "cubicspline")
??regrid
??gdalwarp_grid
??resample
terra::resample(x = terra::rast(smoothing_out),
y = terra::rast(master_image_path),
method = "cubicspline",
threads = T,
by_util = T,
filename = paste0(regrid_out_folder,"PRISMA_resample.tif"))
terra::extend(x = terra::rast(master_image_path),
y = terra::rast(smoothing_out),
fill = 0,
filename = paste0(regrid_out_folder,"PRISMA_extend.tif"),
overwrite = T)
terra::resample(x = terra::rast(smoothing_out),
y = terra::rast(paste0(regrid_out_folder,"PRISMA_extend.tif")),
method = "cubicspline",
threads = T,
by_util = T,
filename = paste0(regrid_out_folder,"PRISMA_resample.tif"))
terra::resample(x = terra::rast(smoothing_out),
y = terra::rast(paste0(regrid_out_folder,"PRISMA_extend.tif")),
method = "cubicspline",
threads = T,
by_util = T,
filename = paste0(regrid_out_folder,"PRISMA_resample.tif"),
overwrite = T)
?resample
install.packages("here")
here::here()
prs_cld_crs_python_path <- paste0(here::here(),"/prs_cld_crs_L1.py")
prs_cld_crs_python_path
command <- paste0("python ",prs_cld_crs_python_path)
command
cwd <- here::here()
command <- paste0("import os \n os.chdir(",cwd,")")
command
command <- paste0("import os \\n os.chdir(",cwd,")")
command
"import os \\n os.chdir(\""
command <- paste0("import os \\n os.chdir('",cwd,"'")")
system()
}
if(product_type == "L2"){
command <- paste0("import os \\n os.chdir('",cwd,"'",")")
command
system("python")
system("python")
system("python")
command <- paste0("python ",prs_cld_crs_python_path)
system(command)
######################################################################
#change CRS ----
######################################################################
#first I write the inputs of prs_cld_crs.py into a file
prisma_input = paste0(out_folder,gsub(".he5","_HCO_FULL.tif",basename(in_file))
prs_cld_crs(),
######################################################################
#change CRS ----
######################################################################
#first I write the inputs of prs_cld_crs.py into a file
prisma_input <- paste0(out_folder,gsub(".he5","_HCO_FULL.tif",basename(in_file)))
in_file <- "//10.0.1.243/nr_data/3_rs_data/PRISMA/JDS/2023/L2C/prove_per_pacchetto/PRS_L2C_STD_20230304102047_20230304102051_0001.he5"
out_folder  <-  "//10.0.1.243/nr_data/3_rs_data/PRISMA/JDS/2023/L2C/prove_per_pacchetto/"
s2_file <- "//10.0.1.243/nr_data/3_rs_data/PRISMA/JDS/2023/L2C/prove_per_pacchetto/S2_20230309_B08_T32TQQ_ritagliato_QGIS.tif"
######################################################################
#change CRS ----
######################################################################
#first I write the inputs of prs_cld_crs.py into a file
prisma_input <- paste0(out_folder,gsub(".he5","_HCO_FULL.tif",basename(in_file)))
prisma_input
prs_cld_crs <- c(prisma_input,s2_input)
prs_cld_crs
s2_input <- s2_file
prs_cld_crs <- c(prisma_input,s2_input)
prs_cld_crs
write.csv(prs_cld_crs, paste0(out_folder,"inputs_of_python_code.csv"))
write.csv(prs_cld_crs,
paste0(out_folder,"inputs_of_python_code.csv"),
row.names = F,
col.names = F)
write.csv(prs_cld_crs,
paste0(out_folder,"inputs_of_python_code.csv"),
row.names = F,
col.names = F,
quote = F)
?write.csv
utils::write.csv(prs_cld_crs,
paste0(out_folder,"inputs_of_python_code.csv"),
row.names = F,
col.names = F,
quote = F)
utils::write.csv(prs_cld_crs,
paste0(here::here(),"inputs_of_python_code.csv"),
row.names = F,
col.names = F,
quote = F)
here::here()
paste0(here::here(),"inputs_of_python_code.csv")
utils::write.csv(prs_cld_crs,
paste0(here::here(),"/inputs_of_python_code.csv"),
row.names = F,
col.names = F,
quote = F)
######################################################################
#change CRS ----
######################################################################
#first I write the inputs of prs_cld_crs.py into a file
prisma_input <- paste0(out_folder,gsub(".he5","_HCO_FULL.tif",basename(in_file)))
prisma_input
utils::write.table(prs_cld_crs,
paste0(here::here(),"/inputs_of_python_code.csv"),
row.names = F,
col.names = F,
quote = F)
utils::write.csv(prs_cld_crs,
paste0(here::here(),"/inputs_of_python_code.csv"),
row.names = F,
col.names = F,
quote = F)
??system
system("python")
system("import os")
system("os.chdir("C:/Users)")
prs_cld_crs_python_path
command <- paste0("python ",prs_cld_crs_python_path)
system(command)
######################################################################
#set working directory of python shell ----
######################################################################
command <- paste0("cd", " ", here::here())
system(command)
######################################################################
#set working directory of python shell ----
######################################################################
command <- paste0("cd", " ", here::here())
system(command)
here::here()
command
here::here()
