#main

#designed in Jun 2025
#author: Emanuele Spirito
#site: CNR-IREA-MI

in_file  <-  "//10.0.1.243/nr_data/3_rs_data/PRISMA/JDS/2023/L2C/prove_per_pacchetto/PRS_L2C_STD_20230304102047_20230304102051_0001.he5"
out_folder  <-  "//10.0.1.243/nr_data/3_rs_data/PRISMA/JDS/2023/L2C/prove_per_pacchetto/"
s2_file <- "//10.0.1.243/nr_data/3_rs_data/PRISMA/JDS/2023/L2C/prove_per_pacchetto/S2_20230309_B08_T32TQQ_ritagliato_QGIS.tif"


######################################################################
#deduce folders ----
######################################################################
product_type <- substring(basename(in_file),5,6)
coreg_out_folder <- paste0(out_folder,"coreg/")
smoothing_out_folder <- paste0(out_folder,"smoothing/")

######################################################################
#prismaread ----
######################################################################
#https://github.com/IREA-CNR-MI/prismaread

if(product_type == "L1"){
  CLOUD <- T
  ATCOR <- T
}
if(product_type == "L2"){
  CLOUD <- F
  ATCOR <- F
}

prismaread::pr_convert(
  in_file = in_file,
  out_folder = out_folder,
  out_format = "GTiff",
  base_georef = T,
  VNIR = T,
  SWIR = T,
  FULL = T,
  ANGLES = T,
  fill_gaps = T,
  source = "HCO",
  join_priority = "SWIR",
  LATLON = T,
  PAN = T,
  CLOUD = CLOUD,
  overwrite = T,
  ATCOR = ATCOR
)

######################################################################
#python settings ----
######################################################################

reticulate::conda_create(envname = "C:/prova/Rconda",
                         packages = c("gdal==3.6.1","arosics==1.10.2","rasterio==1.3.4"),                         packages = c("gdal==3.6.1","arosics==1.10.2","rasterio==1.3.4"),
                         python_version = "3.8.20")

usethis::edit_r_environ()
#RETICULATE_PYTHON="C:/prova/Rconda/python.exe"

reticulate::py_discover_config(use_environment = "C:/prova/Rconda/python.exe")

reticulate::use_python(python = "C:/prova/Rconda/python.exe")

reticulate::py_config()

#try the environment
#reticulate::repl_python()

######################################################################
#change CRS ----
######################################################################
prs_cld_crs(paste0(out_folder,gsub(".he5","_HCO_FULL.tif",basename(in_file))),
            s2_file)

######################################################################
#warp ----
######################################################################
#https://doi.org/10.1016/j.isprsjprs.2024.07.003
#https://doi.org/10.5281/zenodo.11547257

if(product_type == "L1"){
  #reticulate::py_run_file("//10.0.1.243/nr_working/emanuele/Progetto_PRISMA/PRISMA_code/prova.py")
  #reticulate::source_python("//10.0.1.243/nr_working/emanuele/Progetto_PRISMA/PRISMA_code/prs_cld_crs_translate_warp_L1_Copia.py")
  reticulate::py_run_file("//10.0.1.243/nr_working/emanuele/Progetto_PRISMA/PRISMA_code/prs_cld_crs_translate_warp_L1.py")
  change_crs <- paste0(coreg_out_folder,"prs_cld_crs.tif")
}
if(product_type == "L2"){
  reticulate::py_run_file("//10.0.1.243/nr_working/emanuele/Progetto_PRISMA/PRISMA_code/prs_cld_crs_translate_warp_L2C_Copia.py")
  change_crs <- paste0(coreg_out_folder,"prs_crs.tif")
}

prs_cld_crs_translate_warp(out_folder,change_crs,s2_file)

######################################################################
#smoothing ----
######################################################################
library(tidytable)

base::dir.create(smoothing_out_folder, recursive = T, showWarnings = F)

if(product_type == "L1"){
  input_image_path <- paste0(coreg_out_folder,"prs_cld_crs_translate_warp.tif")
}
if(product_type == "L2"){
  input_image_path <- paste0(coreg_out_folder,"prs_crs_translate_warp.tif")
}

output_folder <- "E:/PRISMA_images_smoothed/"
output_path <-  paste0(output_folder, image_date, "_PRISMA_smoothed.tif")

PRISMA_config <- tidytable::fread(here::here("PRISMA_spectral_configuration.csv")) %>%
  mutate(band_row = row_number()) 

PRISMA_bad_bands_table <- fread(here("config_data", "PRISMA_band_selections.csv")) %>%
  filter(BB_SUPER_V3 == 1)

input_bad_bands <- PRISMA_bad_bands_table$band

input_wvl <- PRISMA_config$center

output_wvl <- PRISMA_config %>%
  filter(BND_SEL  == 1) %>%
  pull(center)


spline_fun <- function(pixel, band_center_input, bad_bands_pos, band_center_output, df = 40) {
  # togliamo le bande cattive
  ref_valid <- pixel[-bad_bands_pos]
  wvl_valid <- band_center_input[-bad_bands_pos]
  
  if (any(is.na(ref_valid))) {
    return(rep(NA_real_, length(band_center_output)))
  }
  
  sp <- stats::smooth.spline(x = wvl_valid, y = ref_valid, df = df)
  y_smooth <- predict(sp, x = band_center_output)$y
  # limitiamo a zero
  y_smooth[y_smooth < 0] <- 0
  return(y_smooth)
}


terra_image <- rast(input_image_path)


output_image <- app(
  x = terra_image,
  fun = spline_fun,
  band_center_input = input_wvl, 
  bad_bands_pos = input_bad_bands, 
  band_center_output = output_wvl,
  df=40,
  
  cores = 7,                     
  filename = output_path,
  overwrite = TRUE,
  wopt = list(gdal = c("COMPRESS=LZW", "TILED=YES"))
)



output_image <- app(terra_image, function(i, band_center_input, bad_bands_pos, band_center_output){
  
  center_to_spline <- band_center_input[-bad_bands_pos]
  ref_to_spline <- i[-bad_bands_pos]
  
  if (any(is.na(ref_to_spline))) {
    return(rep(NA, length(band_center_output)))
  }
  
  spline_function <- stats::smooth.spline(center_to_spline, ref_to_spline, df = 40)
  
  res <- predict(spline_function, x = band_center_output)$y
  
  res[res < 0] <- 0
  
  return(res)
  
}, band_center_input = input_wvl, bad_bands_pos = input_bad_bands, band_center_output = output_wvl,
cores = 7, filename = paste0(output_folder, image_date, "_PRISMA_smoothed.tif")
) 





